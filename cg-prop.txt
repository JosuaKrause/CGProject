
Project Proposal
================

Timothy Chu, Josua Krause

Project Description:

We develop a simple ray-tracer using two different data structures
for triangle storage. The ray-tracer is simple in the sense that
we do not implement reflection, refraction, lighting, textures, etc. .
The storage algorithms we want to implement are kd-trees and oct-trees.
The models/scenes we want to render include standard objects like the
teapot or the bunny and special objects artificially creating worst-case
scenarious (like a stadium with a detailed teapot in one corner).
Our outputs are:

- a regular rendering of the scene (brightness of the pixel corresponds to
    angle of the normal at the triangle hit to the view vector)
- barycentric and normal vector coloring (using the coordinates as rgb values) (for debug)
- a depth image (brightness corresponds to the distance of the hit to the eye) (for debug)
- the relative number of performed triangle checks (ie. the number of checks divided by
    the number of triangles in the scene -- maybe on a logarithmic scale) (*)

The last output (marked with (*)) is a helpful visualization of the inner
workings of the data structures. We use this output to detect worst-case
performances of our data structures and how both data structures handle them.
By altering some parameters (like changing the translation or rotation of an object
or limiting the maximal division depth of a storage algorithm) we can get
different performances which can be seen more easily and can be reasoned about
with the triangle checks output. We disregard timed performances, because those
values are implementation (using hacks to speed things up) and hardware (clock speed,
number of cores)dependent. Our ray-tracer works in parallel, though.

Navigation in the scene can be done by using an OpenGL rendered version of the
scene. Once the camera position is fixed the outputs can be created.

We are doing:
- a visualization of an algorithm's output / inner workings
- comparison of (theoretical) performance of different data structures on same inputs

Programming language:
- Java

System:
- Any (at least Windows, MacOS, Linux)
- distributed as .jar

Frontend:
- java.awt for normal image output
- OpenGL for navigation output
- PNG image files for additional image output

What part of the project is to be coded by us:
- everything except...
- standard library
- lwjgl library (only for the navigation view)

Responsibilities:
- mathemagic (Timothy & Josua)
- UI / ray-tracer (Josua)
- obj file loading (Timothy)
- Oct-tree (Josua)
- kd-tree (Timothy)

Papers:

TODO

http://en.wikipedia.org/wiki/K-d_tree

http://en.wikipedia.org/wiki/Octree

the book
